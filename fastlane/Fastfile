# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#

default_platform(:ios)

platform :ios do
    #
    # Before -------------------
    #
    before_all do |lane|
        # Выставляем нужный Xcode только на CI
        # https://github.com/actions/runner-images/blob/main/images/macos/macos-11-Readme.md
        xcode_select("/Applications/Xcode_13.2.1.app") if is_ci
        lanes_with_keychain = [:certificates, :renew_production_certificates]
        if lanes_with_keychain.include?(lane)
            keychain_prepare
        end
    end

  desc "Generate project and install pods"
  lane :prepare do
    sh("echo $PWD")
    sh("mkdir -p ../RK/Resources/Rswift/")
    sh("touch ../RK/Resources/Rswift/R.generated.swift")
    xcodegen
  end

  desc "Register new devices"
  lane :register_new_devices do
    register_devices(devices_file: "./fastlane/devices.txt")
    register_new_devices_production
    register_new_devices_beta
  end

  lane :register_new_devices_production do
    match(type: "development", force_for_new_devices: true)
    match(type: "adhoc", force_for_new_devices: true)
    match(type: "appstore", force_for_new_devices: true)
  end

  desc "Download certificates"
  lane :certificates do
    match(type: "development", readonly: true)
    match(type: "adhoc", readonly: true)
    match(type: "appstore", readonly: true)
  end

  desc "Renew certificates for production scheme"
  lane :renew_production_certificates do
    api_key = app_store_connect_api_key()
    match(api_key: api_key, type: "development", force: true)
    match(api_key: api_key, type: "adhoc", force: true)
    match(api_key: api_key, type: "appstore", force: true)
  end

  desc "Increment build number on the iOS project and commit it"
  lane :increment do
      if is_ci
          buildNumber = ENV['GITHUB_RUN_ID']
          UI.message"build number is here: #{buildNumber}"
          increment_build_number(xcodeproj: 'RK.xcodeproj',
                                 build_number: buildNumber)
      end
  end

  desc "Build scheme in debug mode and upload to Crashlytics"
  lane :build_feature do |values|
    build_app(
              export_method: 'ad-hoc',
              export_xcargs: "-allowProvisioningUpdates",
              export_options: {
                    iCloudContainerEnvironment: 'Development',
                    compileBitcode: false,
                    provisioningProfiles: {
                                          "ru.trykov.roskachestvo" => "match AdHoc ru.trykov.roskachestvo"
                                        }
              }
            )
  end

  desc "Upload to Firebase beta"
  desc "Requires firebase cli https://firebase.google.com/docs/cli"
  desc "Download an install 'curl -sL firebase.tools | bash'"
  desc "Login local machine 'firebase login' or ci 'firebase login:ci'"
  desc "If CI machine - use FIREBASE_TOKEN for firebase_cli_token params"
  lane :upload_firebase do |values|
    firebase_app_distribution(
                  app: ENV["FIREBASE_APP"],
                  ipa_path: "build/artifacts/RK.ipa",
                  groups: 'qa-heal',
                  firebase_cli_token: ENV["FIREBASE_TOKEN"],
                  release_notes: default_changelog
                  )
  end

  desc "Upload to TestFlight"
  desc "APP_STORE_CONNECT_API_KEY - контент ключа"
  desc "APP_STORE_CONNECT_API_KEY_ID - идентификатор ключа"
  desc "APP_STORE_CONNECT_API_ISSUER_ID - идентификатор выпустившего ключ"
  lane :upload_testflight do
      api_key = app_store_connect_api_key()
      pilot(api_key: api_key, skip_waiting_for_build_processing: true, ipa: "build/artifacts/RK.ipa")
  end

  desc "Returns a default changelog."
  lane :default_changelog do
    changelog = changelog_from_git_commits(
        commits_count: 5,
        pretty: "- %s"
    )
    Actions.lane_context[SharedValues::FL_CHANGELOG] = changelog
    puts changelog
    UI.message"#{changelog}"
    changelog
  end

  desc "Build, sign and upload a new beta build to Apple TestFlight"
  desc "This will **not** send an email to all testers, it will only be uploaded to the new TestFlight. "
  desc "CI build set build number with TC, on local build increment by latest at Test Flight"
  lane :build_release do |values|
      build_app(export_method: "app-store")
  end

  desc "Подготовка хранилища ключей для локальной работы и CI"
  desc "Создание локального хранилища и разблокировка"
  lane :keychain_prepare do |values|
      # В случае с новой машиной - на ней нет еще keychain
      begin
          delete_keychain_ci
      rescue
          create_keychain_ci
      end
      create_keychain_ci
      unlock_keychain_ci
  end

  desc "Разблокировать связку ключей macOs"
  desc "Единообразный пароль должен быть для разных устойств"
  desc "FL_UNLOCK_KEYCHAIN_PASSWORD - перемнная окружения для пароля"
  desc "FL_UNLOCK_KEYCHAIN_PATH - переменная окружения для пути к хранилищу"
  lane :unlock_keychain_ci do |values|
       unlock_keychain(
           path: ENV["KEYCHAIN_NAME"],
           password: ENV["KEYCHAIN_PASSWORD"]
       )
  end

  desc "Создание связки ключей"
  desc "default_keychain - должно быть false, чтобы не заменить системный login.keychain"
  desc "FL_UNLOCK_KEYCHAIN_PATH - переменная окружения для пути к хранилищу"
  lane :create_keychain_ci do |values|
       create_keychain(
           name: ENV["KEYCHAIN_NAME"],
           password: ENV["KEYCHAIN_PASSWORD"],
           default_keychain: false,
           unlock: true,
           timeout: 0,
           lock_when_sleeps: false,
           require_create: false
       )
  end

  desc "Удаление связки ключей"
  lane :delete_keychain_ci do
      delete_keychain(name: ENV["KEYCHAIN_NAME"])
  end
end
