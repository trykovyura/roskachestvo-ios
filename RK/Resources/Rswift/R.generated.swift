//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 3 view controllers.
  struct segue {
    /// This struct is generated for `MainFeedViewController`, and contains static references to 2 segues.
    struct mainFeedViewController {
      /// Segue identifier `openResearchDetailsSegue`.
      static let openResearchDetailsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainFeedViewController, ResearchDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openResearchDetailsSegue")
      /// Segue identifier `openResearchFeedSegue`.
      static let openResearchFeedSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MainFeedViewController, ResearchFeedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openResearchFeedSegue")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openResearchDetailsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openResearchDetailsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainFeedViewController, ResearchDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainFeedViewController.openResearchDetailsSegue, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openResearchFeedSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openResearchFeedSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MainFeedViewController, ResearchFeedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mainFeedViewController.openResearchFeedSegue, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ResearchDetailsViewController`, and contains static references to 1 segues.
    struct researchDetailsViewController {
      /// Segue identifier `openProductDetailsSegue`.
      static let openProductDetailsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResearchDetailsViewController, ProductDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openProductDetailsSegue")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openProductDetailsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openProductDetailsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResearchDetailsViewController, ProductDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.researchDetailsViewController.openProductDetailsSegue, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ResearchFeedViewController`, and contains static references to 1 segues.
    struct researchFeedViewController {
      /// Segue identifier `openResearchDetailsSegue`.
      static let openResearchDetailsSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResearchFeedViewController, ResearchDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "openResearchDetailsSegue")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `openResearchDetailsSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func openResearchDetailsSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResearchFeedViewController, ResearchDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.researchFeedViewController.openResearchDetailsSegue, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `MainFeed`.
    static let mainFeed = _R.storyboard.mainFeed()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `ProductDetails`.
    static let productDetails = _R.storyboard.productDetails()
    /// Storyboard `ResearchDetails`.
    static let researchDetails = _R.storyboard.researchDetails()
    /// Storyboard `ResearchFeed`.
    static let researchFeed = _R.storyboard.researchFeed()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MainFeed", bundle: ...)`
    static func mainFeed(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mainFeed)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ProductDetails", bundle: ...)`
    static func productDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.productDetails)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResearchDetails", bundle: ...)`
    static func researchDetails(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.researchDetails)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "ResearchFeed", bundle: ...)`
    static func researchFeed(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.researchFeed)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `Athens Gray`.
    static let athensGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "Athens Gray")
    /// Color `Dove Gray`.
    static let doveGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dove Gray")
    /// Color `Ghost1`.
    static let ghost1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Ghost1")
    /// Color `Ghost2`.
    static let ghost2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Ghost2")
    /// Color `Viridian Green`.
    static let viridianGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "Viridian Green")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Athens Gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func athensGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.athensGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Dove Gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func doveGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.doveGray, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Ghost1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ghost1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ghost1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Ghost2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func ghost2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.ghost2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Viridian Green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func viridianGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.viridianGreen, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 4 files.
  struct file {
    /// Resource file `Backpack-Bold.otf`.
    static let backpackBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Backpack-Bold", pathExtension: "otf")
    /// Resource file `Backpack-Light.otf`.
    static let backpackLightOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Backpack-Light", pathExtension: "otf")
    /// Resource file `Backpack-Regular.otf`.
    static let backpackRegularOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Backpack-Regular", pathExtension: "otf")
    /// Resource file `ProximaNovaBold.otf`.
    static let proximaNovaBoldOtf = Rswift.FileResource(bundle: R.hostingBundle, name: "ProximaNovaBold", pathExtension: "otf")

    /// `bundle.url(forResource: "Backpack-Bold", withExtension: "otf")`
    static func backpackBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backpackBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Backpack-Light", withExtension: "otf")`
    static func backpackLightOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backpackLightOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Backpack-Regular", withExtension: "otf")`
    static func backpackRegularOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.backpackRegularOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "ProximaNovaBold", withExtension: "otf")`
    static func proximaNovaBoldOtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.proximaNovaBoldOtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 4 fonts.
  struct font: Rswift.Validatable {
    /// Font `Backpack-Bold`.
    static let backpackBold = Rswift.FontResource(fontName: "Backpack-Bold")
    /// Font `Backpack-Light`.
    static let backpackLight = Rswift.FontResource(fontName: "Backpack-Light")
    /// Font `Backpack-Regular`.
    static let backpackRegular = Rswift.FontResource(fontName: "Backpack-Regular")
    /// Font `ProximaNova-Bold`.
    static let proximaNovaBold = Rswift.FontResource(fontName: "ProximaNova-Bold")

    /// `UIFont(name: "Backpack-Bold", size: ...)`
    static func backpackBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: backpackBold, size: size)
    }

    /// `UIFont(name: "Backpack-Light", size: ...)`
    static func backpackLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: backpackLight, size: size)
    }

    /// `UIFont(name: "Backpack-Regular", size: ...)`
    static func backpackRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: backpackRegular, size: size)
    }

    /// `UIFont(name: "ProximaNova-Bold", size: ...)`
    static func proximaNovaBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: proximaNovaBold, size: size)
    }

    static func validate() throws {
      if R.font.backpackBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Backpack-Bold' could not be loaded, is 'Backpack-Bold.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.backpackLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Backpack-Light' could not be loaded, is 'Backpack-Light.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.backpackRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Backpack-Regular' could not be loaded, is 'Backpack-Regular.otf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.proximaNovaBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'ProximaNova-Bold' could not be loaded, is 'ProximaNovaBold.otf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `AboutTab`.
    static let aboutTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "AboutTab")
    /// Image `Background`.
    static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Background")
    /// Image `HistoryTab`.
    static let historyTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "HistoryTab")
    /// Image `MainTab`.
    static let mainTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "MainTab")
    /// Image `ScanTabFull`.
    static let scanTabFull = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScanTabFull")
    /// Image `ScanTab`.
    static let scanTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "ScanTab")
    /// Image `SearchTab`.
    static let searchTab = Rswift.ImageResource(bundle: R.hostingBundle, name: "SearchTab")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "AboutTab", bundle: ..., traitCollection: ...)`
    static func aboutTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.aboutTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Background", bundle: ..., traitCollection: ...)`
    static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "HistoryTab", bundle: ..., traitCollection: ...)`
    static func historyTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historyTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MainTab", bundle: ..., traitCollection: ...)`
    static func mainTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.mainTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScanTab", bundle: ..., traitCollection: ...)`
    static func scanTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanTab, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ScanTabFull", bundle: ..., traitCollection: ...)`
    static func scanTabFull(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.scanTabFull, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "SearchTab", bundle: ..., traitCollection: ...)`
    static func searchTab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.searchTab, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 2 localization keys.
    struct localizable {
      /// Value: Исследования
      static let researchTitle = Rswift.StringResource(key: "research.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Категории
      static let categoryTitle = Rswift.StringResource(key: "category.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value: Исследования
      static func researchTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("research.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "research.title"
        }

        return NSLocalizedString("research.title", bundle: bundle, comment: "")
      }

      /// Value: Категории
      static func categoryTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("category.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "category.title"
        }

        return NSLocalizedString("category.title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mainFeed.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try productDetails.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try researchDetails.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try researchFeed.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mainFeed: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainFeedViewController

      let bundle = R.hostingBundle
      let name = "MainFeed"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct productDetails: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProductDetailsViewController

      let bundle = R.hostingBundle
      let name = "ProductDetails"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct researchDetails: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ResearchDetailsViewController

      let bundle = R.hostingBundle
      let name = "ResearchDetails"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct researchFeed: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ResearchFeedViewController

      let bundle = R.hostingBundle
      let name = "ResearchFeed"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
